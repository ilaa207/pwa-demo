{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Header from './Header.vue';\nimport Modal from './Modal.vue';\nimport axios from 'axios';\nexport default {\n  name: 'Order',\n  data() {\n    return {\n      textContent: '',\n      // Contenuto del file di testo\n      //currentDate: new Date().toLocaleDateString() // Formatta la data\n      modalMessage: \"\",\n      // Stato per il messaggio del Modale\n      modalTitle: \"\",\n      customer: []\n    };\n  },\n  components: {\n    Header,\n    Modal\n  },\n  methods: {\n    async sendOrder() {\n      let token = localStorage.getItem('token').replace(/\"/g, ''); // Rimuovo le virgolette\n      // Crea un blob con i dati\n      const blob = new Blob([this.textContent], {\n        type: 'text/plain'\n      });\n      // Crea un oggetto File\n      const file = new File([blob], `test.dat`, {\n        type: 'text/plain'\n      }); //Ordine${this.currentDate}\n      const formData = new FormData();\n      formData.append('file', file); // Aggiungi il file direttamente\n      try {\n        await axios.get('http://localhost:3000/order_sent');\n        this.textContent = '';\n        console.log(response);\n        this.modalTitle = \"Ordine inviato!\";\n        this.modalMessage = \"Il tuo oridine è stato inviato correttamente!\";\n      } catch (error) {\n        console.error(\"Sending failed, error:\", error);\n        console.log(this.customer.id);\n        this.modalTitle = \"Ordine non inviato!\";\n        this.modalMessage = \"Errore: \" + error.message;\n      }\n      this.$refs.orderModal.openModal();\n    }\n  },\n  //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non è loggato, rimando alla pagina di login\n  mounted() {\n    this.customer = JSON.parse(localStorage.getItem('selectedCustomer'));\n    let userId = localStorage.getItem('id');\n    if (userId == null) {\n      this.$router.push({\n        name: 'Login'\n      });\n    }\n  }\n};","map":{"version":3,"names":["Header","Modal","axios","name","data","textContent","modalMessage","modalTitle","customer","components","methods","sendOrder","token","localStorage","getItem","replace","blob","Blob","type","file","File","formData","FormData","append","get","console","log","response","error","id","message","$refs","orderModal","openModal","mounted","JSON","parse","userId","$router","push"],"sources":["/home/ilaria/pwa-demo/src/components/Order.vue"],"sourcesContent":["<template>\n    <Header />\n    <div class=\"d-flex justify-content-start px-4\">\n        <a href=\"javascript:history.back()\">\n            <i class=\"bi bi-chevron-left fs-3\" style=\"color: #022970\"></i>\n        </a>\n    </div>\n    <div class=\"container align-items-center my-3\" style=\"max-width: 900px;\">\n        <div class=\"text-center mb-4\">\n            <Modal ref=\"orderModal\" modalId=\"orderModal\" :title=\"modalTitle\">\n                <p>{{ modalMessage }}</p>\n            </Modal>\n            <h2 class=\"fw-bold\">New order</h2>\n            <p class=\"fs-5\">Place a new order for: {{this.customer.name}}</p>\n        </div>\n        <ul class=\"list-unstyled mb-4\">\n            <li>&bull; Connect the barcode reader to your device via Bluetooth.</li>\n            <li>&bull; Position yourself in the text box below to start inserting the barcodes.</li>\n            <li>&bull; Read barcodes with the connected device (they will be automatically inserted into the text box).</li>\n            <li>&bull; Once you have finished entering the codes click on <strong>'Send'</strong> to send your order!</li>\n        </ul>\n        <div class=\"mb-4\">\n            <textarea class=\"form-control\" rows=\"10\" v-model=\"textContent\" placeholder=\"Scrivi qui...\"></textarea>\n        </div>\n        <div class=\"d-flex justify-content-center gap-3\" style=\"height: 10%;\">\n            <button id=\"send\" class=\"btn btn-primary px-4 w-50 fs-3 mb-3\" @click=\"sendOrder\">Send</button>\n            <button id=\"reset\" class=\"btn btn-primary px-4 w-50 fs-3 mb-3\"\n                @click=\"this.textContent = ''\" title=\"Cancella tutti i codici inseriti\">Delete all</button>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Header from './Header.vue';\nimport Modal from './Modal.vue';\nimport axios from 'axios';\nexport default {\n    name: 'Order',\n    data() {\n        return {\n            textContent: '', // Contenuto del file di testo\n            //currentDate: new Date().toLocaleDateString() // Formatta la data\n            modalMessage: \"\", // Stato per il messaggio del Modale\n            modalTitle: \"\",\n            customer: [],\n        };\n    },\n    components: {\n        Header,\n        Modal\n    },\n    methods: {\n        async sendOrder() {\n            let token = localStorage.getItem('token').replace(/\"/g, ''); // Rimuovo le virgolette\n            // Crea un blob con i dati\n            const blob = new Blob([this.textContent], { type: 'text/plain' });\n            // Crea un oggetto File\n            const file = new File([blob], `test.dat`, { type: 'text/plain' }); //Ordine${this.currentDate}\n            const formData = new FormData();\n            formData.append('file', file); // Aggiungi il file direttamente\n            try {\n                await axios.get('http://localhost:3000/order_sent');\n                this.textContent = '';\n                console.log(response);\n                this.modalTitle = \"Ordine inviato!\";\n                this.modalMessage = \"Il tuo oridine è stato inviato correttamente!\";\n                \n            } catch (error) {\n                console.error(\"Sending failed, error:\", error);\n                console.log(this.customer.id);\n                this.modalTitle = \"Ordine non inviato!\";\n                this.modalMessage = \"Errore: \" + error.message;\n            }\n            this.$refs.orderModal.openModal();\n        }\n    },\n    //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non è loggato, rimando alla pagina di login\n    mounted() {\n        this.customer = JSON.parse(localStorage.getItem('selectedCustomer'));\n        let userId = localStorage.getItem('id')\n        if (userId == null) {\n            this.$router.push({ name: 'Login' })\n        }\n    }\n}\n</script>\n"],"mappings":";AAiCA,OAAOA,MAAK,MAAO,cAAc;AACjC,OAAOC,KAAI,MAAO,aAAa;AAC/B,OAAOC,KAAI,MAAO,OAAO;AACzB,eAAe;EACXC,IAAI,EAAE,OAAO;EACbC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,WAAW,EAAE,EAAE;MAAE;MACjB;MACAC,YAAY,EAAE,EAAE;MAAE;MAClBC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE;IACd,CAAC;EACL,CAAC;EACDC,UAAU,EAAE;IACRT,MAAM;IACNC;EACJ,CAAC;EACDS,OAAO,EAAE;IACL,MAAMC,SAASA,CAAA,EAAG;MACd,IAAIC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE;MAC7D;MACA,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAAC,CAAC,IAAI,CAACZ,WAAW,CAAC,EAAE;QAAEa,IAAI,EAAE;MAAa,CAAC,CAAC;MACjE;MACA,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAAC,CAACJ,IAAI,CAAC,EAAE,UAAU,EAAE;QAAEE,IAAI,EAAE;MAAa,CAAC,CAAC,EAAE;MACnE,MAAMG,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC,EAAE;MAC/B,IAAI;QACA,MAAMjB,KAAK,CAACsB,GAAG,CAAC,kCAAkC,CAAC;QACnD,IAAI,CAACnB,WAAU,GAAI,EAAE;QACrBoB,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;QACrB,IAAI,CAACpB,UAAS,GAAI,iBAAiB;QACnC,IAAI,CAACD,YAAW,GAAI,+CAA+C;MAEvE,EAAE,OAAOsB,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CH,OAAO,CAACC,GAAG,CAAC,IAAI,CAAClB,QAAQ,CAACqB,EAAE,CAAC;QAC7B,IAAI,CAACtB,UAAS,GAAI,qBAAqB;QACvC,IAAI,CAACD,YAAW,GAAI,UAAS,GAAIsB,KAAK,CAACE,OAAO;MAClD;MACA,IAAI,CAACC,KAAK,CAACC,UAAU,CAACC,SAAS,CAAC,CAAC;IACrC;EACJ,CAAC;EACD;EACAC,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC1B,QAAO,GAAI2B,IAAI,CAACC,KAAK,CAACvB,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IACpE,IAAIuB,MAAK,GAAIxB,YAAY,CAACC,OAAO,CAAC,IAAI;IACtC,IAAIuB,MAAK,IAAK,IAAI,EAAE;MAChB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAAEpC,IAAI,EAAE;MAAQ,CAAC;IACvC;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}