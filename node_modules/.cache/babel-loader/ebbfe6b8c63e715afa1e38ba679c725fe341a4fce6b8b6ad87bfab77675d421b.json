{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from '../routers';\nexport default {\n  name: 'Login',\n  data() {\n    return {\n      email: '',\n      password: '',\n      errorMessage: ''\n    };\n  },\n  methods: {\n    async login() {\n      try {\n        let response = await axios.post(`https://phplaravel-729699-3062059.cloudwaysapps.com/api/v1/login`, {\n          email: this.email,\n          password: this.password\n        });\n        console.log(response);\n        if (response.status == 200 && Object.keys(response.data).length > 0) {\n          //faccio così con data perchè è di tipo oggetto -> Object.keys(), restituisce un array contenente tutte le chiavi dell'oggetto. Puoi uso .length su quell'array.\n          localStorage.setItem(\"token\", JSON.stringify(response.data.token));\n          localStorage.setItem(\"id\", JSON.stringify(response.data.user.id));\n          this.$router.push({\n            name: 'Home'\n          });\n        } else {\n          console.warn(\"Login failed, invalid data..\");\n        }\n      } catch (error) {\n        if (this.email.trim() == '' || this.password.trim() == '') {\n          //.trim rimuove gli spazi e gli a capo, controllo se sono vuoti e se uno dei due lo è mando un messaggio di errore\n          this.errorMessage = 'The field cannot be empty.';\n        } else {\n          this.errorMessage = 'Incorrect e-mail or password.'; //nel caso siano pieni entrambi, stampo messaggio di errore diverso\n        }\n        console.error(\"Error while logging in:\", error);\n      }\n    }\n  },\n  //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se è loggato, rimando alla pagina di home\n  mounted() {\n    let userId = localStorage.getItem('id');\n    if (userId) {\n      this.$router.push({\n        name: 'Home'\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","router","name","data","email","password","errorMessage","methods","login","response","post","console","log","status","Object","keys","length","localStorage","setItem","JSON","stringify","token","user","id","$router","push","warn","error","trim","mounted","userId","getItem"],"sources":["/home/ilaria/kanbanapp/src/components/Login.vue"],"sourcesContent":["<template>\n\n  <!-- Container principale -->\n  <div class=\"container d-flex justify-content-center align-items-center vh-100\">\n        <div class=\"col-12 col-sm-8 col-md-6 col-lg-4\">\n            <div class=\"text-center mb-3\" style=\"width: 100%;\">\n                <img src=\"../assets/logo@2x.png\" alt=\"Logo\" class=\"img-fluid mt-0\" style=\"max-height: 100%; max-width: 100%;\"/>\n            </div>\n            <!-- Card di Login -->\n            <div class=\"card shadow-lg\">\n                <div class=\"card-body p-4\">\n                    <!-- Titolo -->\n                    <h3 class=\"text-center mb-4 fw-bold\">Login</h3>\n                    <!-- Form -->\n                    <form>\n                        <!-- Email -->\n                        <div class=\"mb-3\">\n                            <label>Email</label>\n                            <input type=\"text\" v-model=\"email\" @keyup.enter=\"login\" class=\"form-control\" placeholder=\"email@example.com\" required>\n                        </div>\n                        <!-- Password -->\n                        <div class=\"mb-3\">\n                            <label>Password</label>\n                            <input type=\"password\" v-model=\"password\"  @keyup.enter=\"login\" class=\"form-control\"  placeholder=\"Password\" required>\n                        </div>\n                        <!-- Bottone Login -->\n                        <div class=\"d-grid mb-3\">\n                            <button id=\"btnLogin\" type=\"submit\" class=\"btn btn-primary\" @keyup.enter=\"login\" v-on:click=\"login\">Login</button>\n                        </div>\n                        <p class=\"error\" v-if=\"errorMessage\" style=\"color: red;\">{{ errorMessage }}</p>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n\n\n\n   <!--<div class=\"full\">\n        \n        <div class=\"login\">\n            <h1>Please Login</h1>\n            <div class=\"input\">\n                <input type=\"text\" v-model=\"email\" @keyup.enter=\"login\" placeholder=\"Email\" />\n                <input type=\"password\" v-model=\"password\" @keyup.enter=\"login\" placeholder=\"Password\" />\n                <button @keyup.enter=\"login\" v-on:click=\"login\">Login</button>\n            </div>\n            \n        </div>\n    </div> -->\n</template>\n\n<script>\nimport axios from 'axios'\nimport router from '../routers';\nexport default {\n    name: 'Login',\n\n    data() {\n        return {\n            email: '',\n            password: '',\n            errorMessage: '',\n        }\n    },\n\n    methods: {\n        async login() {\n            try {\n                let response = await axios.post(`https://phplaravel-729699-3062059.cloudwaysapps.com/api/v1/login`, {\n                    email: this.email,\n                    password: this.password\n                });\n\n                console.log(response);\n                if (response.status == 200 && Object.keys(response.data).length > 0) { //faccio così con data perchè è di tipo oggetto -> Object.keys(), restituisce un array contenente tutte le chiavi dell'oggetto. Puoi uso .length su quell'array.\n                    localStorage.setItem(\"token\", JSON.stringify(response.data.token));\n                    localStorage.setItem(\"id\", JSON.stringify(response.data.user.id));\n                    this.$router.push({ name: 'Home' });\n                } else {\n                    console.warn(\"Login failed, invalid data..\");\n                }\n                \n            } catch (error) {\n                if (this.email.trim() == '' || this.password.trim() == '') { //.trim rimuove gli spazi e gli a capo, controllo se sono vuoti e se uno dei due lo è mando un messaggio di errore\n                    this.errorMessage = 'The field cannot be empty.';\n                } else {\n                    this.errorMessage = 'Incorrect e-mail or password.'; //nel caso siano pieni entrambi, stampo messaggio di errore diverso\n                }\n                console.error(\"Error while logging in:\", error);\n            }\n        }\n    },\n    //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se è loggato, rimando alla pagina di home\n    mounted() {\n        let userId = localStorage.getItem('id')\n        if (userId) {\n            this.$router.push({ name: 'Home' })\n        }\n    }\n}\n</script>\n\n<style>\n.full{\n    color: #022970;\n}\n.login{\n  width: 400px;\n  height: 410px;\n  display: block;\n  margin-bottom: 30px;\n  margin-right: auto;\n  margin-left: auto;\n  background-color: #022970;\n  box-shadow: #2c3e50;\n  border-radius: 10px;\n}\n.login input{\n  width: 300px;\n  height: 40px;\n  padding-left: 10px;\n  display: block;\n  margin-top: auto;\n  margin-bottom: 30px;\n  margin-right: auto;\n  margin-left: auto;\n  border: 1px solid #ffffff;\n}\n.login button:hover{\n  transition: 0.2s ease-in;\n  background-color: #f0f0f0;\n}\n.login button{\n  width: 200px;\n  height: 40px;\n  padding-left: 10px;\n  display: block;\n  margin-bottom: 30px;\n  margin-right: auto;\n  margin-left: auto;\n  border: 1px solid #ffffff;\n  background: #ffffff;\n  color: #022970;\n  cursor: pointer;\n}\n.login h1{\n  color:white; \n  padding-top: 30px; \n  margin: auto;\n  font-size: 25px;\n  font-family: 'Helvetica';\n}\n.input{\n  display: block;\n  padding: 38px;\n  margin-right: auto;\n  margin-left: auto;\n}\n.error{\n  width:400px;\n  background-color: #022970; \n}\n</style>"],"mappings":";AAuDA,OAAOA,KAAI,MAAO,OAAM;AACxB,OAAOC,MAAK,MAAO,YAAY;AAC/B,eAAe;EACXC,IAAI,EAAE,OAAO;EAEbC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE;IAClB;EACJ,CAAC;EAEDC,OAAO,EAAE;IACL,MAAMC,KAAKA,CAAA,EAAG;MACV,IAAI;QACA,IAAIC,QAAO,GAAI,MAAMT,KAAK,CAACU,IAAI,CAAC,kEAAkE,EAAE;UAChGN,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,QAAQ,EAAE,IAAI,CAACA;QACnB,CAAC,CAAC;QAEFM,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;QACrB,IAAIA,QAAQ,CAACI,MAAK,IAAK,GAAE,IAAKC,MAAM,CAACC,IAAI,CAACN,QAAQ,CAACN,IAAI,CAAC,CAACa,MAAK,GAAI,CAAC,EAAE;UAAE;UACnEC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACX,QAAQ,CAACN,IAAI,CAACkB,KAAK,CAAC,CAAC;UAClEJ,YAAY,CAACC,OAAO,CAAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,QAAQ,CAACN,IAAI,CAACmB,IAAI,CAACC,EAAE,CAAC,CAAC;UACjE,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;YAAEvB,IAAI,EAAE;UAAO,CAAC,CAAC;QACvC,OAAO;UACHS,OAAO,CAACe,IAAI,CAAC,8BAA8B,CAAC;QAChD;MAEJ,EAAE,OAAOC,KAAK,EAAE;QACZ,IAAI,IAAI,CAACvB,KAAK,CAACwB,IAAI,CAAC,KAAK,EAAC,IAAK,IAAI,CAACvB,QAAQ,CAACuB,IAAI,CAAC,KAAK,EAAE,EAAE;UAAE;UACzD,IAAI,CAACtB,YAAW,GAAI,4BAA4B;QACpD,OAAO;UACH,IAAI,CAACA,YAAW,GAAI,+BAA+B,EAAE;QACzD;QACAK,OAAO,CAACgB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD;IACJ;EACJ,CAAC;EACD;EACAE,OAAOA,CAAA,EAAG;IACN,IAAIC,MAAK,GAAIb,YAAY,CAACc,OAAO,CAAC,IAAI;IACtC,IAAID,MAAM,EAAE;MACR,IAAI,CAACN,OAAO,CAACC,IAAI,CAAC;QAAEvB,IAAI,EAAE;MAAO,CAAC;IACtC;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}