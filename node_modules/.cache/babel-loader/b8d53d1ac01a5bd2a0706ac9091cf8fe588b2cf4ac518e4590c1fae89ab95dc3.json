{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from '../routers';\nexport default {\n  name: 'Login',\n  data() {\n    return {\n      email: '',\n      password: '',\n      errorMessage: ''\n    };\n  },\n  methods: {\n    async login() {\n      try {\n        let response = await axios.post(`https://phplaravel-729699-3062059.cloudwaysapps.com/api/v1/login`, {\n          email: this.email,\n          password: this.password\n        });\n        console.log(response);\n        if (response.status == 200 && Object.keys(response.data).length > 0) {\n          //faccio così con data perchè -> Object.keys(), restituisce un array contenente tutte le chiavi dell'oggetto. Puoi uso .length su quell'array.\n          localStorage.setItem(\"token\", JSON.stringify(response.data.token));\n          localStorage.setItem(\"id\", JSON.stringify(response.data.user.id));\n          this.$router.push({\n            name: 'Home'\n          });\n        } else {\n          console.warn(\"Login non riuscito, dati non validi.\");\n        }\n      } catch (error) {\n        if (this.email.trim() == '' || this.password.trim() == '') {\n          this.errorMessage = 'Il campo non può essere vuoto.';\n        } else {\n          this.errorMessage = 'Email o password errati.';\n        }\n        console.error(\"Errore durante il login:\", error);\n      }\n    }\n  },\n  //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non è loggato, rimando alla pagina di login\n  mounted() {\n    let userId = localStorage.getItem('id');\n    if (userId) {\n      this.$router.push({\n        name: 'Home'\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","router","name","data","email","password","errorMessage","methods","login","response","post","console","log","status","Object","keys","length","localStorage","setItem","JSON","stringify","token","user","id","$router","push","warn","error","trim","mounted","userId","getItem"],"sources":["/home/ilaria/progettino/src/components/Login.vue"],"sourcesContent":["<template>\n    <div class=\"full\">\n        <h1>Login</h1>\n        <div class=\"login\">\n            <div class=\"input\">\n                <input type=\"text\" v-model=\"email\" placeholder=\"Email\" />\n                <input type=\"password\" v-model=\"password\" placeholder=\"Password\" />\n                <button @keyup.enter=\"login\" v-on:click=\"login\">Login</button>\n            </div>\n            <p class=\"errore\" v-if=\"errorMessage\" style=\"color: red;\">{{ errorMessage }}</p>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport router from '../routers';\nexport default {\n    name: 'Login',\n\n    data() {\n        return {\n            email: '',\n            password: '',\n            errorMessage: '',\n        }\n    },\n\n    methods: {\n        async login() {\n            try {\n                let response = await axios.post(`https://phplaravel-729699-3062059.cloudwaysapps.com/api/v1/login`, {\n                    email: this.email,\n                    password: this.password\n                });\n\n                console.log(response);\n                if (response.status == 200 && Object.keys(response.data).length > 0) { //faccio così con data perchè -> Object.keys(), restituisce un array contenente tutte le chiavi dell'oggetto. Puoi uso .length su quell'array.\n                    localStorage.setItem(\"token\", JSON.stringify(response.data.token));\n                    localStorage.setItem(\"id\", JSON.stringify(response.data.user.id));\n                    this.$router.push({ name: 'Home' });\n                } else {\n                    console.warn(\"Login non riuscito, dati non validi.\");\n                }\n                \n            } catch (error) {\n                if (this.email.trim() == '' || this.password.trim() == '') {\n                    this.errorMessage = 'Il campo non può essere vuoto.';\n                } else {\n                    this.errorMessage = 'Email o password errati.';\n                }\n                console.error(\"Errore durante il login:\", error);\n            }\n        }\n    },\n    //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non è loggato, rimando alla pagina di login\n    mounted() {\n        let userId = localStorage.getItem('id')\n        if (userId) {\n            this.$router.push({ name: 'Home' })\n        }\n    }\n}\n</script>"],"mappings":";AAeA,OAAOA,KAAI,MAAO,OAAM;AACxB,OAAOC,MAAK,MAAO,YAAY;AAC/B,eAAe;EACXC,IAAI,EAAE,OAAO;EAEbC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE;IAClB;EACJ,CAAC;EAEDC,OAAO,EAAE;IACL,MAAMC,KAAKA,CAAA,EAAG;MACV,IAAI;QACA,IAAIC,QAAO,GAAI,MAAMT,KAAK,CAACU,IAAI,CAAC,kEAAkE,EAAE;UAChGN,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,QAAQ,EAAE,IAAI,CAACA;QACnB,CAAC,CAAC;QAEFM,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;QACrB,IAAIA,QAAQ,CAACI,MAAK,IAAK,GAAE,IAAKC,MAAM,CAACC,IAAI,CAACN,QAAQ,CAACN,IAAI,CAAC,CAACa,MAAK,GAAI,CAAC,EAAE;UAAE;UACnEC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACX,QAAQ,CAACN,IAAI,CAACkB,KAAK,CAAC,CAAC;UAClEJ,YAAY,CAACC,OAAO,CAAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,QAAQ,CAACN,IAAI,CAACmB,IAAI,CAACC,EAAE,CAAC,CAAC;UACjE,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;YAAEvB,IAAI,EAAE;UAAO,CAAC,CAAC;QACvC,OAAO;UACHS,OAAO,CAACe,IAAI,CAAC,sCAAsC,CAAC;QACxD;MAEJ,EAAE,OAAOC,KAAK,EAAE;QACZ,IAAI,IAAI,CAACvB,KAAK,CAACwB,IAAI,CAAC,KAAK,EAAC,IAAK,IAAI,CAACvB,QAAQ,CAACuB,IAAI,CAAC,KAAK,EAAE,EAAE;UACvD,IAAI,CAACtB,YAAW,GAAI,gCAAgC;QACxD,OAAO;UACH,IAAI,CAACA,YAAW,GAAI,0BAA0B;QAClD;QACAK,OAAO,CAACgB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IACJ;EACJ,CAAC;EACD;EACAE,OAAOA,CAAA,EAAG;IACN,IAAIC,MAAK,GAAIb,YAAY,CAACc,OAAO,CAAC,IAAI;IACtC,IAAID,MAAM,EAAE;MACR,IAAI,CAACN,OAAO,CAACC,IAAI,CAAC;QAAEvB,IAAI,EAAE;MAAO,CAAC;IACtC;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}