{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"editor\"\n};\nconst _hoisted_2 = {\n  class: \"send\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Header = _resolveComponent(\"Header\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_Header), _cache[5] || (_cache[5] = _createElementVNode(\"div\", {\n    class: \"popup-container\"\n  }, [_createElementVNode(\"div\", {\n    class: \"popup-box\"\n  }, [_createElementVNode(\"h1\", null, \"Hello World!\"), _createElementVNode(\"p\", null, \"igfunucnof\"), _createElementVNode(\"button\", {\n    class: \"close-btn\"\n  }, \" Ok \")])], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_1, [_cache[2] || (_cache[2] = _createElementVNode(\"h2\", null, \"New Order\", -1 /* HOISTED */)), _cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"Benvenuto nella sezione nuovo ordine!\", -1 /* HOISTED */)), _cache[4] || (_cache[4] = _createElementVNode(\"ul\", null, [_createElementVNode(\"li\", null, \"Collega il lettore di barcode al dispositivo tramite Bluetooth.\"), _createElementVNode(\"li\", null, \"Una volta collegato il lettore, posizionati nella casella di testo sottostante per cominciare a inserire l'ordine.\"), _createElementVNode(\"li\", null, \"Leggi i barcode con il dispositivo collegato (verranno automaticamente inseriti nella casella di testo) \"), _createElementVNode(\"li\", null, \"Controlla sempre che sia stato inserito il barcode corretto!\"), _createElementVNode(\"li\", null, \"Una volta terminato l'inserimento dei codici clicca su 'Send' per inviare il tuo ordine!\")], -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.textContent = $event),\n    placeholder: \"Write here...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.textContent]]), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.sendOrder && $options.sendOrder(...args))\n  }, \"Send\")])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementBlock","_Fragment","_createVNode","_component_Header","_createElementVNode","_hoisted_1","_cache","$event","$data","textContent","placeholder","_hoisted_2","onClick","args","$options","sendOrder"],"sources":["/home/ilaria/kanbanapp/src/components/Order.vue"],"sourcesContent":["<template>\n    <Header />\n    <div class=\"popup-container\">\n        <div class=\"popup-box\">\n            <h1>Hello World!</h1>\n            <p>igfunucnof</p>\n            <button class=\"close-btn\">\n                Ok\n            </button>\n        </div>\n    </div>\n    <div class=\"editor\">\n        <h2>New Order</h2>\n        <h3>Benvenuto nella sezione nuovo ordine!</h3>\n        <ul>\n            <li>Collega il lettore di barcode al dispositivo tramite Bluetooth.</li>\n            <li>Una volta collegato il lettore, posizionati nella casella di testo sottostante per cominciare a inserire\n                l'ordine.</li>\n            <li>Leggi i barcode con il dispositivo collegato (verranno automaticamente inseriti nella casella di testo)\n            </li>\n            <li>Controlla sempre che sia stato inserito il barcode corretto!</li>\n            <li>Una volta terminato l'inserimento dei codici clicca su 'Send' per inviare il tuo ordine!</li>\n        </ul>\n        <textarea v-model=\"textContent\" placeholder=\"Write here...\"></textarea>\n        <div class=\"send\">\n            <button v-on:click=\"sendOrder\">Send</button>\n        </div>\n    </div>\n\n</template>\n\n<script>\nimport Header from './Header.vue';\nimport axios from 'axios';\nexport default {\n    name: 'Order',\n    data() {\n        return {\n            textContent: '', // Contenuto del file di testo\n            //currentDate: new Date().toLocaleDateString() // Formatta la data\n        };\n    },\n    components: {\n        Header\n    },\n    methods: {\n        async sendOrder() {\n            let token = localStorage.getItem('token').replace(/\"/g, ''); // Rimuovo le virgolette\n\n            // Crea un blob con i dati\n            const blob = new Blob([this.textContent], { type: 'text/plain' });\n\n            // Crea un oggetto File\n            const file = new File([blob], `test.dat`, { type: 'text/plain' }); //Ordine${this.currentDate}\n\n            const formData = new FormData();\n            formData.append('file', file); // Aggiungi il file direttamente\n\n            try {\n                let response = await axios.post(`https://phplaravel-729699-3062059.cloudwaysapps.com/api/v1/uploadOrderFile`, formData, {\n                    headers: {\n                        'authorization': `Bearer ${token}`,\n                        'accept': 'application/json',\n                    },\n                });\n                \n                this.textContent = '';\n                console.log(response);\n                alert(\"Order sent!\");\n\n            } catch (error) {\n                console.error(\"Sending failed, error:\", error);\n                alert(\"Order not sent!\");\n            }\n        }\n    },\n\n    showPopup(){\n        const showPopup = document.querySelector('.show-popup');\nconst popupContainer = document.querySelector('.popup-container');\nconst closeBtn = document.querySelector('.close-btn');\nshowPopup.onclick = () => {\n    popupContainer.classList.add('active');\n}\ncloseBtn.onclick = () => {\n    popupContainer.classList.remove('active');\n}\n    },\n    //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non Ã¨ loggato, rimando alla pagina di login\n    mounted() {\n        let userId = localStorage.getItem('id')\n        if (userId == null) {\n            this.$route \n        }\n    }\n}\n</script>\n\n<style>\n\n.popup-container {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, .3);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  opacity: 0;\n  pointer-events: none;\n}\n.popup-container .popup-box {\n  width: 500px;\n  background: #f2f2f2;\n  border-radius: 6px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, .1);\n  padding: 30px;\n  transform: scale(0);\n}\n.popup-box h1 {\n  color: #333;\n  line-height: 1;\n}\n.popup-box p {\n  color: #333;\n  margin: 12px 0 20px;\n}\n.popup-box .close-btn {\n  width: 100%;\n  height: 45px;\n  background: #6e78ff;\n  border-radius: 6px;\n  border: none;\n  outline: none;\n  box-shadow: 0 0 10px rgba(0, 0, 0, .1);\n  cursor: pointer;\n  font-size: 18px;\n  color: #f2f2f2;\n  font-weight: 500;\n}\n</style>"],"mappings":";;EAWSA,KAAK,EAAC;AAAQ;;EAaVA,KAAK,EAAC;AAAM;;;uBAxBzBC,mBAAA,CAAAC,SAAA,SACIC,YAAA,CAAUC,iBAAA,G,0BACVC,mBAAA,CAQM;IARDL,KAAK,EAAC;EAAiB,IACxBK,mBAAA,CAMM;IANDL,KAAK,EAAC;EAAW,IAClBK,mBAAA,CAAqB,YAAjB,cAAY,GAChBA,mBAAA,CAAiB,WAAd,YAAU,GACbA,mBAAA,CAES;IAFDL,KAAK,EAAC;EAAW,GAAC,MAE1B,E,wBAGRK,mBAAA,CAgBM,OAhBNC,UAgBM,G,0BAfFD,mBAAA,CAAkB,YAAd,WAAS,sB,0BACbA,mBAAA,CAA8C,YAA1C,uCAAqC,sB,0BACzCA,mBAAA,CAQK,aAPDA,mBAAA,CAAwE,YAApE,iEAA+D,GACnEA,mBAAA,CACkB,YADd,oHACS,GACbA,mBAAA,CACK,YADD,0GACJ,GACAA,mBAAA,CAAqE,YAAjE,8DAA4D,GAChEA,mBAAA,CAAiG,YAA7F,0FAAwF,E,sCAEhGA,mBAAA,CAAuE;IAvB/E,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAuB2BC,KAAA,CAAAC,WAAW,GAAAF,MAAA;IAAEG,WAAW,EAAC;iDAAzBF,KAAA,CAAAC,WAAW,E,GAC9BL,mBAAA,CAEM,OAFNO,UAEM,GADFP,mBAAA,CAA4C;IAA/BQ,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAC,SAAA,IAAAD,QAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS;KAAE,MAAI,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}