{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport Header from './Header.vue';\nimport axios from 'axios';\nexport default {\n  name: 'Ordine',\n  data() {\n    return {\n      textContent: '',\n      // Contenuto del file di testo\n      currentDate: new Date().toLocaleDateString() // Formatta la data\n    };\n  },\n  components: {\n    Header\n  },\n  methods: {\n    async inviaOrdine() {\n      let token = localStorage.getItem('token');\n      // Crea un blob con i dati\n      const blob = new Blob([this.textContent], {\n        type: 'text/plain'\n      });\n\n      // Crea un link per il download\n      const url = URL.createObjectURL(blob);\n      const file = document.createElement('file');\n      file.href = url;\n      file.download = `Ordine${this.currentDate}.dat`; // Nome del file da scaricare\n\n      file.click(); // avvia il download\n      URL.revokeObjectURL(url); // Libera la memoria\n\n      try {\n        let formData = new FormData();\n        formData.append('file', this.file);\n        let response = await axios.post(`https://phplaravel-729699-3062059.cloudwaysapps.com/api/v1/uploadOrderFile`, formData, {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log(response);\n      } catch (error) {\n        console.error(\"Invio non riuscito, errore:\", error);\n      }\n    }\n  },\n  //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non è loggato, rimando alla pagina di login\n  mounted() {\n    let userId = localStorage.getItem('id');\n    if (userId == null) {\n      this.$router.push({\n        name: 'Login'\n      });\n    }\n  }\n};","map":{"version":3,"names":["Header","axios","name","data","textContent","currentDate","Date","toLocaleDateString","components","methods","inviaOrdine","token","localStorage","getItem","blob","Blob","type","url","URL","createObjectURL","file","document","createElement","href","download","click","revokeObjectURL","formData","FormData","append","response","post","headers","console","log","error","mounted","userId","$router","push"],"sources":["/home/ilaria/progettino/src/components/Ordine.vue"],"sourcesContent":["<template>\n    <Header />\n    <div class=\"editor\">\n        <textarea v-model=\"textContent\" @keyup.onEnter=\"update\" placeholder=\"Scrivi qui...\"></textarea>\n    </div>\n    <div class=\"invia\">\n        <button v-on:click=\"inviaOrdine\">Invia ordine</button>\n    </div>\n</template>\n\n<script>\nimport Header from './Header.vue';\nimport axios from 'axios';\nexport default {\n    name: 'Ordine',\n    data() {\n        return {\n            textContent: '', // Contenuto del file di testo\n            currentDate: new Date().toLocaleDateString() // Formatta la data\n        };\n    },\n    components: {\n        Header\n    },\n    methods: {\n        async inviaOrdine() {\n            let token = localStorage.getItem('token')\n            // Crea un blob con i dati\n            const blob = new Blob([this.textContent], { type: 'text/plain' });\n\n            // Crea un link per il download\n            const url = URL.createObjectURL(blob);\n            const file = document.createElement('file');\n            file.href = url;\n            file.download = `Ordine${this.currentDate}.dat`; // Nome del file da scaricare\n\n            file.click(); // avvia il download\n            URL.revokeObjectURL(url); // Libera la memoria\n\n            try {\n                let formData = new FormData();\n                formData.append('file', this.file);\n                let response = await axios.post(`https://phplaravel-729699-3062059.cloudwaysapps.com/api/v1/uploadOrderFile`, formData, {\n                    headers: {\n                        'Authorization': `Bearer ${token}`,\n                        'Content-Type': 'multipart/form-data'\n                    }\n                });\n\n                console.log(response);\n\n            } catch (error) {\n                console.error(\"Invio non riuscito, errore:\", error);\n            }\n        }\n    },\n    //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non è loggato, rimando alla pagina di login\n    mounted() {\n        let userId = localStorage.getItem('id')\n        if (userId == null) {\n            this.$router.push({ name: 'Login' })\n        }\n    }\n}\n</script>\n"],"mappings":";;;;AAWA,OAAOA,MAAK,MAAO,cAAc;AACjC,OAAOC,KAAI,MAAO,OAAO;AACzB,eAAe;EACXC,IAAI,EAAE,QAAQ;EACdC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,WAAW,EAAE,EAAE;MAAE;MACjBC,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,EAAE;IACjD,CAAC;EACL,CAAC;EACDC,UAAU,EAAE;IACRR;EACJ,CAAC;EACDS,OAAO,EAAE;IACL,MAAMC,WAAWA,CAAA,EAAG;MAChB,IAAIC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO;MACxC;MACA,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAAC,CAAC,IAAI,CAACX,WAAW,CAAC,EAAE;QAAEY,IAAI,EAAE;MAAa,CAAC,CAAC;;MAEjE;MACA,MAAMC,GAAE,GAAIC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;MACrC,MAAMM,IAAG,GAAIC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;MAC3CF,IAAI,CAACG,IAAG,GAAIN,GAAG;MACfG,IAAI,CAACI,QAAO,GAAI,SAAS,IAAI,CAACnB,WAAW,MAAM,EAAE;;MAEjDe,IAAI,CAACK,KAAK,CAAC,CAAC,EAAE;MACdP,GAAG,CAACQ,eAAe,CAACT,GAAG,CAAC,EAAE;;MAE1B,IAAI;QACA,IAAIU,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;QAC7BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACT,IAAI,CAAC;QAClC,IAAIU,QAAO,GAAI,MAAM7B,KAAK,CAAC8B,IAAI,CAAC,4EAA4E,EAAEJ,QAAQ,EAAE;UACpHK,OAAO,EAAE;YACL,eAAe,EAAE,UAAUrB,KAAK,EAAE;YAClC,cAAc,EAAE;UACpB;QACJ,CAAC,CAAC;QAEFsB,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;MAEzB,EAAE,OAAOK,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACvD;IACJ;EACJ,CAAC;EACD;EACAC,OAAOA,CAAA,EAAG;IACN,IAAIC,MAAK,GAAIzB,YAAY,CAACC,OAAO,CAAC,IAAI;IACtC,IAAIwB,MAAK,IAAK,IAAI,EAAE;MAChB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAAErC,IAAI,EAAE;MAAQ,CAAC;IACvC;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}