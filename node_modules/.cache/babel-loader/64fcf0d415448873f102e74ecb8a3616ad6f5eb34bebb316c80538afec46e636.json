{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"editor\"\n};\nconst _hoisted_2 = {\n  class: \"send\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Header = _resolveComponent(\"Header\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_Header), _cache[5] || (_cache[5] = _createElementVNode(\"div\", {\n    id: \"popup\",\n    class: \"popup\"\n  }, [_createElementVNode(\"div\", {\n    class: \"popup-content\"\n  }, [_createElementVNode(\"span\", {\n    class: \"close\",\n    id: \"closePopup\"\n  }, \"×\"), _createElementVNode(\"h2\", null, \"Order sent!\")])], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_1, [_cache[2] || (_cache[2] = _createElementVNode(\"h2\", null, \"New Order\", -1 /* HOISTED */)), _cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"Benvenuto nella sezione nuovo ordine!\", -1 /* HOISTED */)), _cache[4] || (_cache[4] = _createElementVNode(\"ul\", null, [_createElementVNode(\"li\", null, \"Collega il lettore di barcode al dispositivo tramite Bluetooth.\"), _createElementVNode(\"li\", null, \"Una volta collegato il lettore, posizionati nella casella di testo sottostante per cominciare a inserire l'ordine.\"), _createElementVNode(\"li\", null, \"Leggi i barcode con il dispositivo collegato (verranno automaticamente inseriti nella casella di testo) \"), _createElementVNode(\"li\", null, \"Controlla sempre che sia stato inserito il barcode corretto!\"), _createElementVNode(\"li\", null, \"Una volta terminato l'inserimento dei codici clicca su 'Send' per inviare il tuo ordine!\")], -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.textContent = $event),\n    placeholder: \"Write here...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.textContent]]), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.sendOrder && $options.sendOrder(...args))\n  }, \"Send\")])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementBlock","_Fragment","_createVNode","_component_Header","_createElementVNode","id","_hoisted_1","_cache","$event","$data","textContent","placeholder","_hoisted_2","onClick","args","$options","sendOrder"],"sources":["/home/ilaria/kanbanapp/src/components/Order.vue"],"sourcesContent":["<template>\n    <Header />\n    <div id=\"popup\" class=\"popup\">\n        <div class=\"popup-content\">\n            <span class=\"close\" id=\"closePopup\">&times;</span>\n            <h2>Order sent!</h2>\n        </div>\n    </div>\n    <div class=\"editor\">\n        <h2>New Order</h2>\n        <h3>Benvenuto nella sezione nuovo ordine!</h3>\n        <ul>\n            <li>Collega il lettore di barcode al dispositivo tramite Bluetooth.</li>\n            <li>Una volta collegato il lettore, posizionati nella casella di testo sottostante per cominciare a inserire\n                l'ordine.</li>\n            <li>Leggi i barcode con il dispositivo collegato (verranno automaticamente inseriti nella casella di testo)\n            </li>\n            <li>Controlla sempre che sia stato inserito il barcode corretto!</li>\n            <li>Una volta terminato l'inserimento dei codici clicca su 'Send' per inviare il tuo ordine!</li>\n        </ul>\n        <textarea v-model=\"textContent\" placeholder=\"Write here...\"></textarea>\n        <div class=\"send\">\n            <button v-on:click=\"sendOrder\">Send</button>\n        </div>\n    </div>\n\n</template>\n\n<script>\nimport Header from './Header.vue';\nimport axios from 'axios';\nexport default {\n    name: 'Order',\n    data() {\n        return {\n            textContent: '', // Contenuto del file di testo\n            //currentDate: new Date().toLocaleDateString() // Formatta la data\n        };\n    },\n    components: {\n        Header\n    },\n    methods: {\n        async sendOrder() {\n            let token = localStorage.getItem('token').replace(/\"/g, ''); // Rimuovo le virgolette\n\n            // Crea un blob con i dati\n            const blob = new Blob([this.textContent], { type: 'text/plain' });\n\n            // Crea un oggetto File\n            const file = new File([blob], `test.dat`, { type: 'text/plain' }); //Ordine${this.currentDate}\n\n            const formData = new FormData();\n            formData.append('file', file); // Aggiungi il file direttamente\n\n            try {\n                let response = await axios.post(`https://phplaravel-729699-3062059.cloudwaysapps.com/api/v1/uploadOrderFile`, formData, {\n                    headers: {\n                        'authorization': `Bearer ${token}`,\n                        'accept': 'application/json',\n                    },\n                });\n                \n\n\n\n\n                var popup = document.getElementById(\"popup\");\n\n// Ottieni il bottone che apre il pop-up\nvar btn = document.getElementById(\"openPopup\");\n\n// Ottieni l'elemento <span> che chiude il pop-up\nvar span = document.getElementById(\"closePopup\");\n\n// Quando l'utente clicca sul bottone, apri il pop-up\nbtn.onclick = function() {\n    popup.style.display = \"block\";\n}\n\n// Quando l'utente clicca sul <span> (x), chiudi il pop-up\nspan.onclick = function() {\n    popup.style.display = \"none\";\n}\n\n// Quando l'utente clicca al di fuori del pop-up, chiudilo\nwindow.onclick = function(event) {\n    if (event.target == popup) {\n        popup.style.display = \"none\";\n    }\n}\n\n\n\n\n\n\n\n                this.textContent = '';\n                console.log(response);\n                alert(\"Order sent!\");\n\n            } catch (error) {\n                console.error(\"Sending failed, error:\", error);\n                alert(\"Order not sent!\");\n            }\n        }\n    },\n    //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non è loggato, rimando alla pagina di login\n    mounted() {\n        let userId = localStorage.getItem('id')\n        if (userId == null) {\n            this.$router.push({ name: 'Login' })\n        }\n    }\n}\n</script>\n"],"mappings":";;EAQSA,KAAK,EAAC;AAAQ;;EAaVA,KAAK,EAAC;AAAM;;;uBArBzBC,mBAAA,CAAAC,SAAA,SACIC,YAAA,CAAUC,iBAAA,G,0BACVC,mBAAA,CAKM;IALDC,EAAE,EAAC,OAAO;IAACN,KAAK,EAAC;MAClBK,mBAAA,CAGM;IAHDL,KAAK,EAAC;EAAe,IACtBK,mBAAA,CAAkD;IAA5CL,KAAK,EAAC,OAAO;IAACM,EAAE,EAAC;KAAa,GAAO,GAC3CD,mBAAA,CAAoB,YAAhB,aAAW,E,wBAGvBA,mBAAA,CAgBM,OAhBNE,UAgBM,G,0BAfFF,mBAAA,CAAkB,YAAd,WAAS,sB,0BACbA,mBAAA,CAA8C,YAA1C,uCAAqC,sB,0BACzCA,mBAAA,CAQK,aAPDA,mBAAA,CAAwE,YAApE,iEAA+D,GACnEA,mBAAA,CACkB,YADd,oHACS,GACbA,mBAAA,CACK,YADD,0GACJ,GACAA,mBAAA,CAAqE,YAAjE,8DAA4D,GAChEA,mBAAA,CAAiG,YAA7F,0FAAwF,E,sCAEhGA,mBAAA,CAAuE;IApB/E,uBAAAG,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAoB2BC,KAAA,CAAAC,WAAW,GAAAF,MAAA;IAAEG,WAAW,EAAC;iDAAzBF,KAAA,CAAAC,WAAW,E,GAC9BN,mBAAA,CAEM,OAFNQ,UAEM,GADFR,mBAAA,CAA4C;IAA/BS,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAC,SAAA,IAAAD,QAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS;KAAE,MAAI,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}