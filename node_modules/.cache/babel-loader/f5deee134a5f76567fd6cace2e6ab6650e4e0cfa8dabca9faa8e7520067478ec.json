{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Header from './Header.vue';\nimport axios from 'axios';\nexport default {\n  name: 'Order',\n  data() {\n    return {\n      textContent: '' // Contenuto del file di testo\n      //currentDate: new Date().toLocaleDateString() // Formatta la data\n    };\n  },\n  components: {\n    Header\n  },\n  methods: {\n    async sendOrder() {\n      let token = localStorage.getItem('token').replace(/\"/g, ''); // Rimuovo le virgolette\n\n      // Crea un blob con i dati\n      const blob = new Blob([this.textContent], {\n        type: 'text/plain'\n      });\n\n      // Crea un oggetto File\n      const file = new File([blob], `test.dat`, {\n        type: 'text/plain'\n      }); //Ordine${this.currentDate}\n\n      const formData = new FormData();\n      formData.append('file', file); // Aggiungi il file direttamente\n\n      try {\n        let response = await axios.post(`https://phplaravel-729699-3062059.cloudwaysapps.com/api/v1/uploadOrderFile`, formData, {\n          headers: {\n            'authorization': `Bearer ${token}`,\n            'accept': 'application/json'\n          }\n        });\n        console.log(response);\n        alert(\"Order sent!\");\n      } catch (error) {\n        console.error(\"Sending failed, error:\", error);\n        alert(\"Order not sent!\");\n      }\n    }\n  },\n  //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non è loggato, rimando alla pagina di login\n  mounted() {\n    let userId = localStorage.getItem('id');\n    if (userId == null) {\n      this.$router.push({\n        name: 'Login'\n      });\n    }\n  }\n};","map":{"version":3,"names":["Header","axios","name","data","textContent","components","methods","sendOrder","token","localStorage","getItem","replace","blob","Blob","type","file","File","formData","FormData","append","response","post","headers","console","log","alert","error","mounted","userId","$router","push"],"sources":["/home/ilaria/kanbanapp/src/components/Order.vue"],"sourcesContent":["<template>\n    <Header />\n    <div class=\"newOrder\">\n        <h2>New Order</h2>\n        <h3>Benvenuto nella sezione nuovo ordine!</h3>\n        <ul>\n            <li>Collega il lettore di barcode al dispositivo tramite Bluetooth.</li>\n            <li>Una volta collegato il lettore, posizionati nella casella di testo sottostante per cominciare a inserire l'ordine.</li>\n            <li>Spara i barcode (verranno automaticamente inseriti nella casella di testo)</li>\n            <li>Controlla sempre che sia stato inserito il barcode corretto!</li>\n            <li>Una volta terminato l'inserimento dei codici clicca su 'Send' per inviare il tuo ordine!</li>\n        </ul>\n        <textarea v-model=\"textContent\" @keyup.onEnter=\"update\" placeholder=\"Write here...\"></textarea>\n    </div>\n    <div class=\"send\">\n        <button v-on:click=\"sendOrder\">Send</button>\n    </div>\n</template>\n\n<script>\nimport Header from './Header.vue';\nimport axios from 'axios';\nexport default {\n    name: 'Order',\n    data() {\n        return {\n            textContent: '', // Contenuto del file di testo\n            //currentDate: new Date().toLocaleDateString() // Formatta la data\n        };\n    },\n    components: {\n        Header\n    },\n    methods: {\n    async sendOrder() {\n        let token = localStorage.getItem('token').replace(/\"/g, ''); // Rimuovo le virgolette\n\n        // Crea un blob con i dati\n        const blob = new Blob([this.textContent], { type: 'text/plain' });\n\n        // Crea un oggetto File\n        const file = new File([blob], `test.dat`, { type: 'text/plain' }); //Ordine${this.currentDate}\n\n        const formData = new FormData();\n        formData.append('file', file); // Aggiungi il file direttamente\n\n        try {\n            let response = await axios.post(`https://phplaravel-729699-3062059.cloudwaysapps.com/api/v1/uploadOrderFile`, formData, {\n                headers: {\n                    'authorization': `Bearer ${token}`,\n                    'accept': 'application/json',\n                },\n            });\n\n            console.log(response);\n            alert(\"Order sent!\");\n            \n        } catch (error) {\n            console.error(\"Sending failed, error:\", error);\n            alert(\"Order not sent!\");\n        }\n    }\n},\n    //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non è loggato, rimando alla pagina di login\n    mounted() {\n        let userId = localStorage.getItem('id')\n        if (userId == null) {\n            this.$router.push({ name: 'Login' })\n        }\n    }\n}\n</script>\n"],"mappings":";AAoBA,OAAOA,MAAK,MAAO,cAAc;AACjC,OAAOC,KAAI,MAAO,OAAO;AACzB,eAAe;EACXC,IAAI,EAAE,OAAO;EACbC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,WAAW,EAAE,EAAE,CAAE;MACjB;IACJ,CAAC;EACL,CAAC;EACDC,UAAU,EAAE;IACRL;EACJ,CAAC;EACDM,OAAO,EAAE;IACT,MAAMC,SAASA,CAAA,EAAG;MACd,IAAIC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE;;MAE7D;MACA,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAAC,CAAC,IAAI,CAACT,WAAW,CAAC,EAAE;QAAEU,IAAI,EAAE;MAAa,CAAC,CAAC;;MAEjE;MACA,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAAC,CAACJ,IAAI,CAAC,EAAE,UAAU,EAAE;QAAEE,IAAI,EAAE;MAAa,CAAC,CAAC,EAAE;;MAEnE,MAAMG,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC,EAAE;;MAE/B,IAAI;QACA,IAAIK,QAAO,GAAI,MAAMnB,KAAK,CAACoB,IAAI,CAAC,4EAA4E,EAAEJ,QAAQ,EAAE;UACpHK,OAAO,EAAE;YACL,eAAe,EAAE,UAAUd,KAAK,EAAE;YAClC,QAAQ,EAAE;UACd;QACJ,CAAC,CAAC;QAEFe,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;QACrBK,KAAK,CAAC,aAAa,CAAC;MAExB,EAAE,OAAOC,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CD,KAAK,CAAC,iBAAiB,CAAC;MAC5B;IACJ;EACJ,CAAC;EACG;EACAE,OAAOA,CAAA,EAAG;IACN,IAAIC,MAAK,GAAInB,YAAY,CAACC,OAAO,CAAC,IAAI;IACtC,IAAIkB,MAAK,IAAK,IAAI,EAAE;MAChB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAAE5B,IAAI,EAAE;MAAQ,CAAC;IACvC;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}