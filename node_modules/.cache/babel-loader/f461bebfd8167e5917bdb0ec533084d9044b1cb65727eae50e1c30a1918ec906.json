{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Header from './Header.vue';\nexport default {\n  name: 'OpenOrder',\n  data() {\n    return {\n      order: []\n    };\n  },\n  components: {\n    Header\n  },\n  methods: {},\n  //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non è loggato, rimando alla pagina di login\n  mounted() {\n    this.order = JSON.parse(localStorage.getItem('selectedOrder'));\n    let userId = localStorage.getItem('id');\n    if (userId == null) {\n      this.$router.push({\n        name: 'Login'\n      });\n    }\n  }\n};","map":{"version":3,"names":["Header","name","data","order","components","methods","mounted","JSON","parse","localStorage","getItem","userId","$router","push"],"sources":["/home/ilaria/pwa-demo/src/components/OpenOrder.vue"],"sourcesContent":["<template>\n    <Header />\n    <div class=\"d-flex justify-content-start px-4\">\n        <a href=\"javascript:history.back()\">\n            <i class=\"bi bi-chevron-left fs-3\" style=\"color: #022970\"></i>\n        </a>\n    </div>\n    <h1>Ordine n° {{ this.order.id }}</h1>\n    <ul class=\"list-group list-group-flush\">\n        <li v-for=\"item in this.order.items\" :key=\"item.id\" class=\"client-list list-group-item\">\n            Item ID: {{ item.id }} <br>\n            \n            &emsp;Client code: {{ item.code_item_client }} <br>\n            &emsp;Supplier code: {{ item.code_item_supplier }} <br>\n            &emsp;N. containers: {{ item.n_containers }} <br>\n            &emsp;Quantity delivered: {{ item.quantity_delivered }} <br>\n            &emsp;Shelf: {{ item.shelf }} <br>\n            &emsp;Shelving unit: {{ item.shelving_unit }} <br>\n            &emsp;Description: {{ item.description }}<br> \n        </li>\n    </ul>\n</template>\n\n<script>\nimport Header from './Header.vue';\nexport default {\n    name: 'OpenOrder',\n    data() {\n        return {\n            order: [],\n        };\n    },\n    components: {\n        Header,\n    },\n    methods: {\n        \n    },\n    //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non è loggato, rimando alla pagina di login\n    mounted() {\n        this.order = JSON.parse(localStorage.getItem('selectedOrder'));\n        \n        let userId = localStorage.getItem('id')\n        if (userId == null) {\n            this.$router.push({ name: 'Login' })\n        }\n    }\n}\n</script>\n"],"mappings":";AAwBA,OAAOA,MAAK,MAAO,cAAc;AACjC,eAAe;EACXC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE;IACX,CAAC;EACL,CAAC;EACDC,UAAU,EAAE;IACRJ;EACJ,CAAC;EACDK,OAAO,EAAE,CAET,CAAC;EACD;EACAC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACH,KAAI,GAAII,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC;IAE9D,IAAIC,MAAK,GAAIF,YAAY,CAACC,OAAO,CAAC,IAAI;IACtC,IAAIC,MAAK,IAAK,IAAI,EAAE;MAChB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAAEZ,IAAI,EAAE;MAAQ,CAAC;IACvC;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}