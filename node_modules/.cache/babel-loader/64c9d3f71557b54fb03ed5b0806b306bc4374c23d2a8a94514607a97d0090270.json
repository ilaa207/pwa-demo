{"ast":null,"code":"import Header from './Header.vue';\nimport axios from 'axios';\nexport default {\n  name: 'Order',\n  props: {\n    title: {\n      type: String,\n      default: 'Titolo Modale'\n    },\n    message: {\n      type: String,\n      default: 'Questo è un messaggio nel modale.'\n    }\n  },\n  data() {\n    return {\n      textContent: '' // Contenuto del file di testo\n      //currentDate: new Date().toLocaleDateString() // Formatta la data\n    };\n  },\n  components: {\n    Header\n  },\n  methods: {\n    closeModal() {\n      const modal = this.$refs.modal;\n      const bootstrapModal = bootstrap.Modal.getInstance(modal);\n      bootstrapModal.hide();\n    },\n    confirm() {\n      this.$emit('confirm');\n      this.closeModal();\n    }\n  },\n  async sendOrder() {\n    let token = localStorage.getItem('token').replace(/\"/g, ''); // Rimuovo le virgolette\n\n    // Crea un blob con i dati\n    const blob = new Blob([this.textContent], {\n      type: 'text/plain'\n    });\n\n    // Crea un oggetto File\n    const file = new File([blob], `test.dat`, {\n      type: 'text/plain'\n    }); //Ordine${this.currentDate}\n\n    const formData = new FormData();\n    formData.append('file', file); // Aggiungi il file direttamente\n\n    try {\n      let response = await axios.post(`https://phplaravel-729699-3062059.cloudwaysapps.com/api/v1/uploadOrderFile`, formData, {\n        headers: {\n          'authorization': `Bearer ${token}`,\n          'accept': 'application/json'\n        }\n      });\n      this.textContent = '';\n      console.log(response);\n      alert(\"Order sent!\");\n    } catch (error) {\n      console.error(\"Sending failed, error:\", error);\n      alert(\"Order not sent!\");\n    }\n  },\n  //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non è loggato, rimando alla pagina di login\n  mounted() {\n    let userId = localStorage.getItem('id');\n    if (userId == null) {\n      this.$route;\n    }\n    const modal = new bootstrap.Modal(this.$refs.modal);\n    this.$refs.modal.addEventListener('hidden.bs.modal', () => {\n      this.$emit('close');\n    });\n  }\n};","map":{"version":3,"names":["Header","axios","name","props","title","type","String","default","message","data","textContent","components","methods","closeModal","modal","$refs","bootstrapModal","bootstrap","Modal","getInstance","hide","confirm","$emit","sendOrder","token","localStorage","getItem","replace","blob","Blob","file","File","formData","FormData","append","response","post","headers","console","log","alert","error","mounted","userId","$route","addEventListener"],"sources":["/home/ilaria/kanbanapp/src/components/Order.vue"],"sourcesContent":["<template>\n    <Header />\n    <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\" ref=\"modal\">\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\" id=\"exampleModalLabel\">{{ title }}</h5>\n          <button type=\"button\" class=\"btn-close\" @click=\"closeModal\" aria-label=\"Close\"></button>\n        </div>\n        <div class=\"modal-body\">\n          <p>{{ message }}</p>\n          <slot></slot>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" @click=\"closeModal\">Chiudi</button>\n          <button type=\"button\" class=\"btn btn-primary\" @click=\"confirm\">Conferma</button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n\n\n    <div class=\"editor\">\n        <h2>New Order</h2>\n        <h3>Benvenuto nella sezione nuovo ordine!</h3>\n        <ul>\n            <li>Collega il lettore di barcode al dispositivo tramite Bluetooth.</li>\n            <li>Una volta collegato il lettore, posizionati nella casella di testo sottostante per cominciare a inserire\n                l'ordine.</li>\n            <li>Leggi i barcode con il dispositivo collegato (verranno automaticamente inseriti nella casella di testo)\n            </li>\n            <li>Controlla sempre che sia stato inserito il barcode corretto!</li>\n            <li>Una volta terminato l'inserimento dei codici clicca su 'Send' per inviare il tuo ordine!</li>\n        </ul>\n        <textarea v-model=\"textContent\" placeholder=\"Write here...\"></textarea>\n        <div class=\"send\">\n            <button id=\"send\" class=\"btn btn-primary\" v-on:click=\"sendOrder\">Send</button>\n        </div>\n        <div class=\"reset\">\n            <button id=\"reset\" class=\"btn btn-primary\" v-on:click=\"this.textContent=''\">Reset</button>\n        </div>\n    </div>\n\n</template>\n\n<script>\nimport Header from './Header.vue';\nimport axios from 'axios';\nexport default {\n    name: 'Order',\n    props: {\n    title: {\n      type: String,\n      default: 'Titolo Modale'\n    },\n    message: {\n      type: String,\n      default: 'Questo è un messaggio nel modale.'\n    }\n  },\n    data() {\n        return {\n            textContent: '', // Contenuto del file di testo\n            //currentDate: new Date().toLocaleDateString() // Formatta la data\n        };\n    },\n    components: {\n        Header\n    },\n    methods: {\n        closeModal() {\n      const modal = this.$refs.modal;\n      const bootstrapModal = bootstrap.Modal.getInstance(modal);\n      bootstrapModal.hide();\n    },\n    confirm() {\n      this.$emit('confirm');\n      this.closeModal();\n    }\n  },\n\n\n        async sendOrder() {\n            let token = localStorage.getItem('token').replace(/\"/g, ''); // Rimuovo le virgolette\n\n            // Crea un blob con i dati\n            const blob = new Blob([this.textContent], { type: 'text/plain' });\n\n            // Crea un oggetto File\n            const file = new File([blob], `test.dat`, { type: 'text/plain' }); //Ordine${this.currentDate}\n\n            const formData = new FormData();\n            formData.append('file', file); // Aggiungi il file direttamente\n\n            try {\n                let response = await axios.post(`https://phplaravel-729699-3062059.cloudwaysapps.com/api/v1/uploadOrderFile`, formData, {\n                    headers: {\n                        'authorization': `Bearer ${token}`,\n                        'accept': 'application/json',\n                    },\n                });\n                this.textContent = '';\n                console.log(response);\n                alert(\"Order sent!\");\n\n            } catch (error) {\n                console.error(\"Sending failed, error:\", error);\n                alert(\"Order not sent!\");\n            }\n        },\n\n    \n    //controllo che l'utente sia loggato, lo faccio tramite l'id salvato e se non è loggato, rimando alla pagina di login\n    mounted() {\n        let userId = localStorage.getItem('id')\n        if (userId == null) {\n            this.$route \n        }\n        const modal = new bootstrap.Modal(this.$refs.modal);\n        this.$refs.modal.addEventListener('hidden.bs.modal', () => {\n      this.$emit('close');\n    });\n}\n}\n\n</script>\n\n<style>\n\n.send button{\n  float: left;\n  width: 30%;\n  height: 60px;\n  padding-left: 10px;\n  display: block;\n  margin-top: 30px;\n  margin-bottom: 30px;\n  margin-right: 60px;\n  margin-left: 10%;\n  border: 1px solid #022970;\n  border-radius: 5px;\n  background: #022970;\n  color: #ffffff;\n  cursor: pointer;\n  font-size: 2em;\n}\n.send button:hover{\n  transition: 0.2s ease-in;\n  background-color: #002390;\n}\n.reset button{\n  float: right;\n  width: 30%;\n  height: 60px;\n  padding-left: 10px;\n  display: block;\n  margin-top: 30px;\n  margin-bottom: 30px;\n  margin-right: 10%;\n  margin-left: 30px;\n  border: 1px solid #be0202;\n  border-radius: 5px;\n  background: #be0202;\n  color: #ffffff;\n  cursor: pointer;\n  font-size: 2em;\n}\n.reset button:hover{\n  transition: 0.2s ease-in;\n  background-color: #002390;\n}\n</style>\n"],"mappings":"AAgDA,OAAOA,MAAK,MAAO,cAAc;AACjC,OAAOC,KAAI,MAAO,OAAO;AACzB,eAAe;EACXC,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE;IACPC,KAAK,EAAE;MACLC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX,CAAC;IACDC,OAAO,EAAE;MACPH,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX;EACF,CAAC;EACCE,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,WAAW,EAAE,EAAE,CAAE;MACjB;IACJ,CAAC;EACL,CAAC;EACDC,UAAU,EAAE;IACRX;EACJ,CAAC;EACDY,OAAO,EAAE;IACLC,UAAUA,CAAA,EAAG;MACf,MAAMC,KAAI,GAAI,IAAI,CAACC,KAAK,CAACD,KAAK;MAC9B,MAAME,cAAa,GAAIC,SAAS,CAACC,KAAK,CAACC,WAAW,CAACL,KAAK,CAAC;MACzDE,cAAc,CAACI,IAAI,CAAC,CAAC;IACvB,CAAC;IACDC,OAAOA,CAAA,EAAG;MACR,IAAI,CAACC,KAAK,CAAC,SAAS,CAAC;MACrB,IAAI,CAACT,UAAU,CAAC,CAAC;IACnB;EACF,CAAC;EAGK,MAAMU,SAASA,CAAA,EAAG;IACd,IAAIC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE;;IAE7D;IACA,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAAC,CAAC,IAAI,CAACnB,WAAW,CAAC,EAAE;MAAEL,IAAI,EAAE;IAAa,CAAC,CAAC;;IAEjE;IACA,MAAMyB,IAAG,GAAI,IAAIC,IAAI,CAAC,CAACH,IAAI,CAAC,EAAE,UAAU,EAAE;MAAEvB,IAAI,EAAE;IAAa,CAAC,CAAC,EAAE;;IAEnE,MAAM2B,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC,EAAE;;IAE/B,IAAI;MACA,IAAIK,QAAO,GAAI,MAAMlC,KAAK,CAACmC,IAAI,CAAC,4EAA4E,EAAEJ,QAAQ,EAAE;QACpHK,OAAO,EAAE;UACL,eAAe,EAAE,UAAUb,KAAK,EAAE;UAClC,QAAQ,EAAE;QACd;MACJ,CAAC,CAAC;MACF,IAAI,CAACd,WAAU,GAAI,EAAE;MACrB4B,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;MACrBK,KAAK,CAAC,aAAa,CAAC;IAExB,EAAE,OAAOC,KAAK,EAAE;MACZH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CD,KAAK,CAAC,iBAAiB,CAAC;IAC5B;EACJ,CAAC;EAGL;EACAE,OAAOA,CAAA,EAAG;IACN,IAAIC,MAAK,GAAIlB,YAAY,CAACC,OAAO,CAAC,IAAI;IACtC,IAAIiB,MAAK,IAAK,IAAI,EAAE;MAChB,IAAI,CAACC,MAAK;IACd;IACA,MAAM9B,KAAI,GAAI,IAAIG,SAAS,CAACC,KAAK,CAAC,IAAI,CAACH,KAAK,CAACD,KAAK,CAAC;IACnD,IAAI,CAACC,KAAK,CAACD,KAAK,CAAC+B,gBAAgB,CAAC,iBAAiB,EAAE,MAAM;MAC7D,IAAI,CAACvB,KAAK,CAAC,OAAO,CAAC;IACrB,CAAC,CAAC;EACN;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}